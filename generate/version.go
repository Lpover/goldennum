package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

type versionInfo struct {
	Time string
	SHA1 string
}

const (
	versionOutput   = "config/version.go"
	versionTemplate = `// Code generated by github.com/forewing/goldennum/generate. (@generated) DO NOT EDIT.
package config

var (
	BuildTime = "{{.Time}}"
	BuildSHA1 = "{{.SHA1}}"
)
`
)

// Generate version.go
func generateVersion() {
	tmpl, err := template.New(versionOutput).Parse(versionTemplate)
	if err != nil {
		fmt.Fprintf(os.Stderr, "version: %v\n", err)
		os.Exit(1)
	}

	versionFile, err := os.Create(versionOutput)
	if err != nil {
		fmt.Fprintf(os.Stderr, "version: %v\n", err)
		os.Exit(1)
	}

	err = tmpl.Execute(versionFile, getVersionInfo())
	if err != nil {
		fmt.Fprintf(os.Stderr, "version: %v\n", err)
		os.Exit(1)
	}
}

func getVersionInfo() (info versionInfo) {
	return versionInfo{
		Time: time.Now().String(),
		SHA1: getVersionSHA1(),
	}
}

func getVersionSHA1() (sha1 string) {
	defer func() {
		if err := recover(); err != nil {
			fmt.Fprintf(os.Stderr, "version: %v\n", err)
		}
	}()

	sha1 = ""

	headData, err := ioutil.ReadFile(".git/HEAD")
	if err != nil {
		panic(err)
	}
	headSplit := strings.Split(strings.TrimSpace(string(headData)), " ")

	if len(headSplit) == 1 {
		// detached HEAD state
		return strings.TrimSpace(headSplit[0])
	}

	sha1Data, err := ioutil.ReadFile(filepath.Join(".git", headSplit[len(headSplit)-1]))
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(string(sha1Data))
}
